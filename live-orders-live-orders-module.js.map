{"version":3,"sources":["webpack:///./src/app/restaurants/waiter/live-orders/edit-order/edit-order.component.css","webpack:///./src/app/restaurants/waiter/live-orders/edit-order/edit-order.component.html","webpack:///./src/app/restaurants/waiter/live-orders/edit-order/edit-order.component.ts","webpack:///./src/app/restaurants/waiter/live-orders/live-orders-routing.module.ts","webpack:///./src/app/restaurants/waiter/live-orders/live-orders.component.css","webpack:///./src/app/restaurants/waiter/live-orders/live-orders.component.html","webpack:///./src/app/restaurants/waiter/live-orders/live-orders.component.ts","webpack:///./src/app/restaurants/waiter/live-orders/live-orders.module.ts","webpack:///./src/app/restaurants/waiter/live-orders/view-menu/view-menu.component.css","webpack:///./src/app/restaurants/waiter/live-orders/view-menu/view-menu.component.html","webpack:///./src/app/restaurants/waiter/live-orders/view-menu/view-menu.component.ts"],"names":[],"mappings":"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","file":"live-orders-live-orders-module.js","sourcesContent":["module.exports = \"#main{\\r\\n     margin-top: 50px;\\r\\n   }\\r\\nmat-card{\\r\\n    width: 160px;\\r\\n    font-size: 11px;\\r\\n    height: 100px;\\r\\n    margin-top: 20px;\\r\\n    background-color: bisque;\\r\\n}\\r\\nh6{\\r\\n    font-size: 14px;\\r\\n    text-align: center;\\r\\n   \\r\\n}\\r\\n#c1{\\r\\n    height: 500px;\\r\\n    background-color: rgb(243, 192, 174);\\r\\n    margin-left: 50px;\\r\\n   \\r\\n}\\r\\n#c2{\\r\\n    height: 500px;\\r\\n  width:500px;\\r\\n    background-color: rgb(247, 238, 164);\\r\\n\\r\\n}\\r\\nbutton{\\r\\n    float: right;\\r\\n   \\r\\n}\\r\\nmat-tab{\\r\\n    font-size: 14px;\\r\\n}\\r\\n#name{\\r\\n    color: blue;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"details\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-sm-3\\\">\\n          <h6>Waiter Name: {{waiterName}}</h6>\\n        </div>\\n        <div class=\\\"col-sm-3\\\">\\n          <h6>Table Name: {{tableName}}</h6>\\n        </div>\\n        <div class=\\\"col-sm-3\\\">\\n          <h6>Date: {{today | date}}</h6>\\n        </div>\\n        <div class=\\\"col-sm-3\\\">\\n          <h6>Time: {{today | date:'shortTime'}}</h6>\\n        </div>\\n      </div>\\n    </div>\\n    <mat-tab-group mat-stretch-tabs>\\n      <mat-tab label=\\\"VEG Items\\\" style=\\\"color: white\\\">\\n        <div class=\\\"row\\\" style=\\\"width: 100%\\\">\\n          <div class=\\\"col-sm-6\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n              <input matInput placeholder=\\\"Menu Name\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"auto\\\" [formControl]=\\\"vegCtrl\\\">\\n              <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\n                <mat-option *ngFor=\\\"let state of veg | async\\\" [value]=\\\"state.menuName\\\" (click)=\\\"saveTempOrder(state.menuId,state.menuName,state.quantity,state.basicAmount)\\\">\\n                  <span *ngIf=\\\"state.menuCategory=='vegetarian'\\\">\\n                    {{state.menuCode}}: {{state.menuName}}\\n                  </span>\\n                </mat-option>\\n              </mat-autocomplete>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\" style=\\\"width: 100%\\\">\\n          <div *ngFor=\\\"let menuMasters of menuMaster\\\">\\n            <div *ngIf=\\\"menuMasters.menuCategory=='vegetarian'\\\">\\n              <div class=\\\"col-sm-6\\\" style=\\\"margin-left: 40px;\\\">\\n                <mat-card class=\\\"example-card\\\">\\n                  <img mat-card-image src=\\\"https://material.angular.io/assets/img/examples/shiba2.jpg\\\" alt=\\\"Photo of a Shiba Inu\\\" height=\\\"130px\\\"\\n                    width=\\\"200px\\\">\\n                  <mat-card-content style=\\\"margin-top: -10px;\\\">\\n                    <div class=\\\"row\\\">\\n                      <div class=\\\"col-sm-8\\\">\\n                        <span>{{menuMasters.menuName}}</span>\\n                      </div>\\n                      <div class=\\\"col-sm-4\\\">\\n                        <span style=\\\"float: right;\\\">RS:{{menuMasters.basicAmount}}</span>\\n                      </div>\\n                    </div>\\n                  </mat-card-content>\\n                  <mat-card-actions style=\\\"margin-top: -30px;\\\">\\n                    <div class=\\\"row\\\" style=\\\"text-align: center;margin-left: 40px;\\\">\\n                      <div class=\\\"col-sm-3\\\">\\n                        <button mat-icon-button (click)=\\\"addquantity(menuMasters.menuId,menuMasters.menuName,menuMasters.basicAmount)\\\">\\n                          <mat-icon>add</mat-icon>\\n                        </button>\\n                      </div>\\n                      <div class=\\\"col-sm-3\\\">\\n                        <div *ngFor=\\\"let temp of tempOrders\\\">\\n                          <div *ngIf=\\\"temp.menuId==menuMasters.menuId\\\">\\n                            <button mat-icon-button>\\n                              <span class=\\\"amount\\\">{{temp.quantity}}</span>\\n                            </button>\\n                          </div>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"col-sm-3\\\">\\n                        <button mat-icon-button (click)=\\\"subquantity(menuMasters.menuId,menuMasters.menuName,menuMasters.basicAmount)\\\">\\n                          <mat-icon style=\\\"margin-top: -10px\\\">minimize</mat-icon>\\n                        </button>\\n                      </div>\\n                      <div class=\\\"col-sm-3\\\" hidden>\\n                        <mat-icon (click)=\\\"deleteMenu()\\\">cancel</mat-icon>\\n                      </div>\\n                    </div>\\n                  </mat-card-actions>\\n                </mat-card>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </mat-tab>\\n      <mat-tab label=\\\"Non-VEG Items\\\" style=\\\"color: white\\\">\\n        <div class=\\\"row\\\" style=\\\"width: 100%\\\">\\n          <div class=\\\"col-sm-6\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n              <input matInput placeholder=\\\"Menu Name\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"auto1\\\" [formControl]=\\\"nonvegCtrl\\\">\\n              <mat-autocomplete #auto1=\\\"matAutocomplete\\\">\\n                <mat-option *ngFor=\\\"let state of nonveg | async\\\" [value]=\\\"state.menuName\\\" (click)=\\\"saveTempOrder(state.menuId,state.menuName,state.quantity,state.basicAmount)\\\">\\n                  <div *ngIf=\\\"state.menuCategory=='non-vegetarian'\\\">\\n                    <span>\\n                      {{state.menuCode}}: {{state.menuName}}\\n                    </span>\\n                  </div>\\n                </mat-option>\\n              </mat-autocomplete>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\" style=\\\"width: 100%\\\">\\n          <div *ngFor=\\\"let menuMasters of menuMaster\\\">\\n            <div *ngIf=\\\"menuMasters.menuCategory=='non-vegetarian' && menuMasters.availableMenuQuantity>=1\\\">\\n              <div class=\\\"col-sm-6\\\" style=\\\"margin-left: 40px;\\\">\\n                <mat-card class=\\\"example-card\\\">\\n                  <img mat-card-image src=\\\"https://material.angular.io/assets/img/examples/shiba2.jpg\\\" alt=\\\"Photo of a Shiba Inu\\\" height=\\\"130px\\\"\\n                    width=\\\"200px\\\">\\n                  <mat-card-content style=\\\"margin-top: -10px;\\\">\\n                    <div class=\\\"row\\\">\\n                      <div class=\\\"col-sm-8\\\">\\n                        <span>{{menuMasters.menuName}}</span>\\n                      </div>\\n                      <div class=\\\"col-sm-4\\\">\\n                        <span style=\\\"float: right;\\\">RS:{{menuMasters.basicAmount}}</span>\\n                      </div>\\n                    </div>\\n                  </mat-card-content>\\n                  <mat-card-actions style=\\\"margin-top: -30px;\\\">\\n                    <div class=\\\"row\\\" style=\\\"text-align: center;margin-left: 40px;\\\">\\n                      <div class=\\\"col-sm-3\\\">\\n                        <button mat-icon-button (click)=\\\"addquantity(menuMasters.menuId,menuMasters.menuName,menuMasters.basicAmount)\\\">\\n                          <mat-icon>add</mat-icon>\\n                        </button>\\n                      </div>\\n                      <div class=\\\"col-sm-3\\\">\\n                        <div *ngFor=\\\"let temp of tempOrders\\\">\\n                          <div *ngIf=\\\"temp.menuId==menuMasters.menuId\\\">\\n                            <button mat-icon-button>\\n                              <span class=\\\"amount\\\">{{temp.quantity}}</span>\\n                            </button>\\n                          </div>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"col-sm-3\\\">\\n                        <button mat-icon-button (click)=\\\"subquantity(menuMasters.menuId,menuMasters.menuName,menuMasters.basicAmount)\\\">\\n                          <mat-icon style=\\\"margin-top: -10px\\\">minimize</mat-icon>\\n                        </button>\\n                      </div>\\n                      <div class=\\\"col-sm-3\\\" hidden>\\n                        <mat-icon (click)=\\\"deleteMenu()\\\">cancel</mat-icon>\\n                      </div>\\n                    </div>\\n                  </mat-card-actions>\\n                </mat-card>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </mat-tab>\\n      <mat-tab label=\\\"Others Items\\\" style=\\\"color: white\\\">\\n        <div class=\\\"row\\\" style=\\\"width: 100%\\\">\\n          <div class=\\\"col-sm-6\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n              <input matInput placeholder=\\\"Menu Name\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"auto2\\\" [formControl]=\\\"othersCtrl\\\">\\n              <mat-autocomplete #auto2=\\\"matAutocomplete\\\">\\n                <mat-option *ngFor=\\\"let state of others | async\\\" [value]=\\\"state.menuName\\\" (click)=\\\"saveTempOrder(state.menuId,state.menuName,state.quantity,state.basicAmount)\\\">\\n                  <div *ngIf=\\\"state.menuCategory=='others'\\\">\\n                    <span>\\n                      {{state.menuCode}}: {{state.menuName}}\\n                    </span>\\n                  </div>\\n                </mat-option>\\n              </mat-autocomplete>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\" style=\\\"width: 100%\\\">\\n          <div *ngFor=\\\"let menuMasters of menuMaster\\\">\\n            <div *ngIf=\\\"menuMasters.menuCategory=='others'&& menuMasters.availableMenuQuantity>=1\\\">\\n              <div class=\\\"col-sm-6\\\" style=\\\"margin-left: 40px;\\\">\\n                <mat-card class=\\\"example-card\\\">\\n                  <img mat-card-image src=\\\"https://material.angular.io/assets/img/examples/shiba2.jpg\\\" alt=\\\"Photo of a Shiba Inu\\\" height=\\\"130px\\\"\\n                    width=\\\"200px\\\">\\n                  <mat-card-content style=\\\"margin-top: -10px;\\\">\\n                    <div class=\\\"row\\\">\\n                      <div class=\\\"col-sm-8\\\">\\n                        <span>{{menuMasters.menuName}}</span>\\n                      </div>\\n                      <div class=\\\"col-sm-4\\\">\\n                        <span style=\\\"float: right;\\\">RS:{{menuMasters.basicAmount}}</span>\\n                      </div>\\n                    </div>\\n                  </mat-card-content>\\n                  <mat-card-actions style=\\\"margin-top: -30px;\\\">\\n                    <div class=\\\"row\\\" style=\\\"text-align: center;margin-left: 40px;\\\">\\n                      <div class=\\\"col-sm-3\\\">\\n                        <button mat-icon-button (click)=\\\"addquantity(menuMasters.menuId,menuMasters.menuName,menuMasters.basicAmount)\\\">\\n                          <mat-icon>add</mat-icon>\\n                        </button>\\n                      </div>\\n                      <div class=\\\"col-sm-3\\\">\\n                        <div *ngFor=\\\"let temp of tempOrders\\\">\\n                          <div *ngIf=\\\"temp.menuId==menuMasters.menuId\\\">\\n                            <button mat-icon-button>\\n                              <span class=\\\"amount\\\">{{temp.quantity}}</span>\\n                            </button>\\n                          </div>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"col-sm-3\\\">\\n                        <button mat-icon-button (click)=\\\"subquantity(menuMasters.menuId,menuMasters.menuName,menuMasters.basicAmount)\\\">\\n                          <mat-icon style=\\\"margin-top: -10px\\\">minimize</mat-icon>\\n                        </button>\\n                      </div>\\n                      <div class=\\\"col-sm-3\\\" hidden>\\n                        <mat-icon (click)=\\\"deleteMenu()\\\">cancel</mat-icon>\\n                      </div>\\n                    </div>\\n                  </mat-card-actions>\\n                </mat-card>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </mat-tab>\\n    </mat-tab-group>\\n  </div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Table } from '../../../admin/KOT/table/table';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Order } from '../../../admin/KOT/order/order';\nimport { OrderService } from '../../../admin/KOT/order/order.service';\nimport { TableService } from '../../../admin/KOT/table/table.service';\nimport { MenuMasterService } from '../../../admin/KOT/menu-master/menu-master.service';\nimport { MenuMaster } from '../../../admin/KOT/menu-master/menu-master';\nimport { TempOrder } from '../../../admin/KOT/order/temp-order';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-edit-order',\n  templateUrl: './edit-order.component.html',\n  styleUrls: ['./edit-order.component.css']\n})\nexport class EditOrderComponent implements OnInit {\n  vegCtrl = new FormControl();\n  nonvegCtrl = new FormControl();\n  othersCtrl = new FormControl();\n  waiterCtrl=new FormControl();\n  veg: Observable<MenuMaster[]>\n  nonveg: Observable<MenuMaster[]>\n  others: Observable<MenuMaster[]>\n  private table: Table;\n  private tableId;\n  private orderId;\n  private waiterId;\n  private time;\n  private date;\n  private tableName;\n  private order: Order;\n  private waierName;\n  private menuMaster:MenuMaster[];\n  private tempOrder:TempOrder;\n  private tempOrders;\n  private amount;\n\n  constructor(private activatedRoute: ActivatedRoute,\n    private orderService: OrderService,\n    private tableService:TableService,\n  private menuMasterService:MenuMasterService,private router:Router) { }\n\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(paramsId => {\n      this.orderId = paramsId.orderId;\n     \n    });\n    this.order = new Order();\n    this.getOrder();\n    this.getMenuMaster();\n   this.tempOrder=new TempOrder();\n\n  }\n  getOrder() {\n    this.orderService.getOrder(this.orderId).subscribe((orderlist) => {\n      console.log('orderlist', orderlist);\n      this.order=orderlist;\n      this.waiterId=this.order.waiterId;\n      this.time=this.order.time;\n      this.date=this.order.date;\n      this.tableId=this.order.tableId;\n      console.log('table',this.tableId);\n      this.getTableName();\n      this.getTempOrderByTableId();\n    }, err => {\n      alert('error');\n    })\n\n  }\n  getTableName(){\n      this.tableService.getTableName(this.tableId).subscribe((tableName)=>{\n      this.table=tableName;\n      this.tableName=this.table.tableName;\n      console.log('tableName',this.tableName);\n      this.waierName='A';\n      },err=>{\n      alert('err');\n    })\n  }\n  getMenuMaster() {\n    this.menuMasterService.getMenuMaster().subscribe((menuList) => {\n      this.menuMaster = menuList;\n      this.veg = this.vegCtrl.valueChanges\n      .pipe(\n        startWith(''),\n        map(state => state ? this._filterStates(state) : this.menuMaster.slice())\n      );\n      this.nonveg = this.nonvegCtrl.valueChanges\n      .pipe(\n        startWith(''),\n        map(state => state ? this._filterStates(state) : this.menuMaster.slice())\n      );\n      this.others = this.othersCtrl.valueChanges\n      .pipe(\n        startWith(''),\n        map(state => state ? this._filterStates(state) : this.menuMaster.slice())\n      );\n      console.log('menuList', menuList)\n    }, err => {\n      alert(\"don't get\");\n    });\n  }\n\n  private _filterStates(value: string): MenuMaster[] {\n    const filterValue = value.toLowerCase();\n    return this.menuMaster.filter(menu => menu.menuCode.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  saveTempOrder(menuId: number, menuName: string, quantity: number, basicAmount: number) {\n    this.tempOrder.tempOrderId=null;\n    this.tempOrder.tableId=this.tableId;\n    this.tempOrder.quantity = quantity;\n    this.tempOrder.menuId = menuId;\n    this.tempOrder.menuName = menuName;\n    this.tempOrder.basicAmount = basicAmount;\n    this.tempOrder.amount=basicAmount;\n    this.tempOrder.waiterId=1;\n       this.orderService.saveTempOrder(this.tempOrder).subscribe((data) => {\n       this.getTempOrderByTableId();\n    }, (error) => {\n      console.log(error);\n    })\n  }\n  getTempOrderByTableId() {\n    this.orderService.getTempOrderByTableId(this.tableId).subscribe((data) => {\n      this.tempOrders = data;\n      this.amount = this.tempOrder.basicAmount;\n        }, (error) => {\n      console.log(error)\n    });\n  }\n  increaseQuantity(tempOrderId:number,quantity:number,basicAmount:number,value:number){\n    let quantitys;\n    if(value>quantity){\n      quantitys=quantity+1;\n         }else{\n     quantitys=quantity-1;\n       }\n  \n    let Amount=basicAmount*quantitys;\n    this.tempOrder.tempOrderId=tempOrderId;\n    this.tempOrder.quantity=quantitys;\n    this.tempOrder.amount=Amount;\n    console.log('quantity',quantitys,'Amount',Amount)\n    this.orderService.updateQuantity(this.tempOrder).subscribe((data)=>{\n      console.log(\"save\");\n      this.getTempOrderByTableId();\n    },(error)=>{\n      console.log(error);\n    })\n  }\n  updateOrder(){\n        console.log(this.order);\n      this.orderService.updateOrder(this.order).subscribe((data) => {\n        console.log(data);\n        this.router.navigateByUrl('restaurants/waiter/liveOrders');\n      }, (error) => {\n        console.log(error);\n      });\n    }\n\n    deleteTempOrder(tempOrderId:number){\n      console.log(tempOrderId)\n      this.orderService.deleteTempOrder(tempOrderId).subscribe((data)=>{\n        console.log(data);\n       this.orderService.checkTemOrderByTableId(this.tableId).subscribe((data)=>{\n       \n       },(error)=>{\n         console.log(error);\n       });\n       this.getTempOrderByTableId();\n      },(error)=>{\n        console.log(error);\n      });\n    }\n  }\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LiveOrdersComponent } from './live-orders.component';\r\nimport { EditOrderComponent } from './edit-order/edit-order.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LiveOrdersComponent\r\n    },  {\r\n        path: 'editOrder/:orderId', component: EditOrderComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LiveOrdersRoutingModule {\r\n}\r\n","module.exports = \"#viewMenuPage{\\r\\n    background-color: rgb(248, 157, 157);\\r\\n}\\r\\n#reOrder{\\r\\n    background-color: rgb(248, 212, 158);\\r\\n}\\r\\nbutton{\\r\\n    width: 100%;\\r\\n}\\r\\n#newOrder{\\r\\n    margin-top: 15px;\\r\\n    margin-bottom: 15px;\\r\\n}\\r\\n#closeOrder{\\r\\n    background-color: rgb(119, 184, 128);\\r\\n}\\r\\n.container{\\r\\n    margin-top: 55px;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <button mat-raised-button color=\\\"primary\\\" id=\\\"newOrder\\\" (click)=\\\"newOrder()\\\">New Order</button>\\n  <div *ngFor=\\\"let orders of order\\\">\\n    <div *ngIf=\\\"orders.status!='payment'\\\">\\n      <mat-card style=\\\"width: 100%\\\">\\n        <div class=\\\"row\\\" style=\\\"width: 100%\\\">\\n          <div class=\\\"col-sm-2\\\" style=\\\"width: 100%\\\">\\n            <h6>OrderId:{{orders.orderId}}</h6>\\n          </div>\\n          <div class=\\\"col-sm-2\\\" style=\\\"width: 100%\\\">\\n            <h6>WaiterId:{{orders.waiterId}}</h6>\\n            <h6>TableId:{{orders.tableId}}</h6>\\n          </div>\\n\\n          <div class=\\\"col-sm-2\\\" style=\\\"width: 100%\\\">\\n            <h6>Date:{{orders.date}}</h6>\\n            <h6>Time:{{orders.time}}</h6>\\n          </div>\\n          <div class=\\\"col-sm-4\\\" style=\\\"width: 100%\\\">\\n          </div>\\n          <div class=\\\"col-sm-2\\\" style=\\\"float: right;width: 100%\\\">\\n            <div *ngIf=\\\"orders.status!='close'\\\">\\n              <button id=\\\"viewMenuPage\\\" mat-raised-button (click)=\\\"viewMenuPage(orders.orderId)\\\">View Menu</button>\\n              <button id=\\\"reOrder\\\" mat-raised-button (click)=\\\"reOrder(orders.orderId)\\\">ReOrder</button>\\n            </div>\\n            <div *ngIf=\\\"orders.status=='order'\\\">\\n              <button id=\\\"closeOrder\\\" mat-raised-button (click)=\\\"pay(orders.tableId,orders.orderId)\\\">Close Order</button>\\n            </div>\\n            <div *ngIf=\\\"orders.status=='close'\\\">\\n              <button type=\\\"submit\\\" mat-raised-button color=\\\"accent\\\" (click)=\\\"billing(orders.orderId)\\\">Payment</button>\\n            </div>\\n          </div>\\n        </div>\\n      </mat-card>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { OrderService } from '../../admin/KOT/order/order.service';\nimport { Order } from '../../admin/KOT/order/order';\nimport { MenuOrder } from '../../admin/KOT/order/menu-order';\nimport { ViewMenuComponent } from './view-menu/view-menu.component';\nimport { MatDialog } from '@angular/material';\nimport { Router } from '../../../../../node_modules/@angular/router';\nimport { TableService } from '../../admin/KOT/table/table.service';\nimport { Table } from '../../admin/KOT/table/table';\n\n\n@Component({\n  selector: 'app-live-orders',\n  host: {'(window:keydown)': 'hotkeys($event)'},\n  templateUrl: './live-orders.component.html',\n  styleUrls: ['./live-orders.component.css']\n})\nexport class LiveOrdersComponent implements OnInit {\n  private order: Order;\n  private menuOrder: MenuOrder;\n  private menuName;\n  private table: Table;\n  private tableId;\n\n  constructor(private orderService: OrderService,\n    private _dialog: MatDialog, private router: Router,\n    private tableService: TableService) { }\n\n  ngOnInit() {\n    this.getAllOrder();\n    this.table = new Table();\n\n  }\n\n  hotkeys(event){\n    if (event.keyCode == 78){\n       this.newOrder();\n    }\n    if (event.keyCode == 86){\n     \n   }\n   if (event.keyCode == 78){\n   \n }\n if (event.keyCode == 78){\n  \n}\nif (event.keyCode == 78){\n  \n}\n }\n  getAllOrder() {\n    this.orderService.getAllOrder().subscribe((allOrders) => {\n      this.order = allOrders;\n    }, err => {\n      alert('error');\n    })\n  }\n\n  newOrder() {\n    this.router.navigateByUrl('restaurants/waiter/tableOrder');\n  }\n\n  viewMenuPage(orderId: number) {\n    const dialogRef = this._dialog.open(ViewMenuComponent, {\n      data: { orderId: orderId }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result === 1) {\n\n      }\n    });\n  }\n\n  reOrder(orderId: number) {\n    this.router.navigate(['restaurants/waiter/tableOrder/reorder/' + orderId])\n  }\n\n  pay(tableId: number, orderId: number) {\n    this.table.status = 'payment';\n    this.table.tableId=tableId;\n    console.log(this.table);\n    this.tableService.updateStatus(this.table).subscribe((data) => {\n      this.orderService.updateOrderStatus(orderId).subscribe((data) => {\n        this.getAllOrder();\n      }, (error) => {\n        console.log(error);\n      });\n    }, (error) => {\n      console.log(error);\n    });\n\n  }\n\n  billing(orderId:number){\n    this.router.navigate(['restaurants/waiter/billings',orderId])\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LiveOrdersComponent } from './live-orders.component';\nimport { LiveOrdersRoutingModule } from './live-orders-routing.module';\nimport { OrderService } from '../../admin/KOT/order/order.service';\nimport { HttpModule } from '../../../../../node_modules/@angular/http';\nimport { MatCardModule, MatDividerModule, MatTabsModule, MatButtonModule, MatBadgeModule, MatIconModule, MatAutocompleteModule } from '../../../../../node_modules/@angular/material';\nimport { ViewMenuComponent } from './view-menu/view-menu.component';\nimport { MatDialogModule } from '@angular/material';\nimport { EditOrderComponent } from './edit-order/edit-order.component';\nimport { TableService } from '../../admin/KOT/table/table.service';\nimport { MenuMasterService } from '../../admin/KOT/menu-master/menu-master.service';\nimport { MatFormFieldModule, MatInputModule } from '@angular/material';\nimport { ReactiveFormsModule, FormsModule } from '../../../../../node_modules/@angular/forms';\nimport { MenuOrderService } from '../menu-order/menu-order.service';\n\n@NgModule({\n  imports: [\n    CommonModule, LiveOrdersRoutingModule,\n    HttpModule, MatCardModule,\n    MatDialogModule, MatDividerModule, CommonModule, MatTabsModule, MatCardModule,\n    MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule,\n    MatDividerModule, MatDialogModule, MatButtonModule, MatAutocompleteModule, MatBadgeModule, MatIconModule\n\n\n  ],\n  declarations: [LiveOrdersComponent, ViewMenuComponent, EditOrderComponent],\n  providers: [OrderService, TableService, MenuMasterService, MenuOrderService],\n  entryComponents: [ViewMenuComponent,]\n})\nexport class LiveOrdersModule { }\n","module.exports = \".container{\\r\\n    width: 600px;\\r\\n    height: 100%;\\r\\n}\\r\\nh6{\\r\\n    font-family: 'Times New Roman', Times, serif;\\r\\n    font-size: 20px;\\r\\n    text-align: center;\\r\\n}\\r\\nmat-divider{\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-3\\\">\\n        <h6>MenuId</h6>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <h6>MenuName</h6>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <h6>Quantity</h6>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <h6>Amount</h6>\\n      </div>\\n    </div>\\n    <mat-divider></mat-divider>\\n    <div *ngFor=\\\"let menu of menuOrder\\\">\\n      <div class=\\\"row\\\" id=\\\"menulist\\\">\\n        <div class=\\\"col-sm-3\\\">\\n          <h6>{{menu.menuId}}</h6>\\n        </div>\\n        <div class=\\\"col-sm-3\\\">\\n          <h6>{{menu.menuName}}</h6>\\n        </div>\\n        <div class=\\\"col-sm-3\\\">\\n          <h6>{{menu.quantity}}</h6>\\n        </div>\\n        <div class=\\\"col-sm-3\\\">\\n          <h6>{{menu.amount}}</h6>\\n        </div>\\n      </div>\\n    </div>\\n    <mat-divider></mat-divider>\\n    <button  mat-raised-button color=\\\"primary\\\" style=\\\"float: right;\\\" (click)=\\\" onNoClick()\\\">Close</button>\\n  </div>\"","import { Component, OnInit,Inject } from '@angular/core';\nimport{MAT_DIALOG_DATA,MatDialogRef} from '@angular/material';\nimport { OrderService } from '../../../admin/KOT/order/order.service';\nimport { MenuOrder } from '../../../admin/KOT/order/menu-order';\n\n@Component({\n  selector: 'app-view-menu',\n  templateUrl: './view-menu.component.html',\n  styleUrls: ['./view-menu.component.css']\n})\nexport class ViewMenuComponent implements OnInit {\n  private menuOrder:MenuOrder;\n  constructor(public dialogRef:MatDialogRef<ViewMenuComponent>,\n    @Inject(MAT_DIALOG_DATA) public data:any,\n    public orderService:OrderService) { }\n\n  ngOnInit() {\n    console.log(this.data.orderId);\n    this.getMenuOrder();\n  \n  }\n  getMenuOrder(){\n    this.orderService.getMenuOrder(this.data.orderId).subscribe((getMenuOrder)=>{\n      this.menuOrder=getMenuOrder;\n      console.log(this.menuOrder)\n    })\n  }\n  onNoClick():void{\n    this.dialogRef.close();\n  }\n\n}\n"],"sourceRoot":""}